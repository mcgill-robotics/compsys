# Initialize McGill Robotics customizations, ROS setup and paths

# Determine shell
SHELL_EXT=$(
  ([ -n "${ZSH_VERSION}" ] && echo zsh) ||
  ([ -n "${BASH_VERSION}" ] && echo bash)
)

# ZSH-specific settings
if [[ ${SHELL_EXT} = "zsh" ]]; then
  # Set CLOBBER option to properly source ROS
  setopt CLOBBER

  # Allow for duplicate paths in the stack
  unsetopt PUSHD_IGNORE_DUPS
fi

# Setup ROS
if [[ -s /opt/ros/kinetic/setup.${SHELL_EXT} ]]; then
  source /opt/ros/kinetic/setup.${SHELL_EXT}
fi

function rosconnect {
  if [[ -n "${1}" ]]; then
    export ROS_MASTER_URI=http://${1}:11311
  else
    # Default is cancelling previous behaviour by setting master to localhost.
    rosconnect localhost
  fi
}

function rosworkon {
  if [[ -n "${1}" ]]; then
    if [[ ! -d "${ROBOTIC_PATH}/${1}" ]]; then
      echo "Could not find robot repository named ${1} in ${ROBOTIC_PATH}!"
      return 1
    fi

    # Reset ROBOT
    export ROBOT=${1}
    local repo_path="${ROBOTIC_PATH}/${ROBOT}"

    # Reset package path from previous workspace
    export ROS_PACKAGE_PATH=/opt/ros/kinetic/share

    # Source the new workspace
    if [[ -s ${repo_path}/catkin_ws/devel/setup.${SHELL_EXT} ]]; then
      source ${repo_path}/catkin_ws/devel/setup.${SHELL_EXT}
    fi

    # Set environment variables
    export ROS_WORKSPACE="${repo_path}/catkin_ws"

    # Source robot-specific configuration
    if [[ -f ${repo_path}/robotrc ]]; then
      source ${repo_path}/robotrc
    fi

    # Determine CATKIN_PROFILE
    unset CATKIN_PROFILE
    local catkin_profiles_root="${ROS_WORKSPACE}/.catkin_tools/profiles"
    if [[ -n ${2} ]]; then
      # When second parameter is set, change profile and export TOPICS_PATH
      local profile_path="${catkin_profiles_root}/${2}"
      if [[ ! -d "${profile_path}" ]]; then
        echo "Could not find profile at ${profile_path}"
        return 1
      else
        export CATKIN_PROFILE="${2}"
        pushd ${ROS_WORKSPACE}
        catkin profile set ${CATKIN_PROFILE} > /dev/null
        popd
      fi
    else
      # When the second parameter is not set, find the current active profile
      if [[ -e "${catkin_profiles_root}/profiles.yaml" ]]; then
        local active_profile=$(
          head -n 1 "${catkin_profiles_root}/profiles.yaml" | cut -d' ' -f2)
        export CATKIN_PROFILE="${active_profile}"
        local profile_path="${catkin_profiles_root}/${CATKIN_PROFILE}"
      fi
    fi

    # Set TOPICS_PATH for bagging
    if [[ -z "${CATKIN_PROFILE}" ]] ||
      [[ "${CATKIN_PROFILE}" == "default" ]]
      [[ ! -e ${profile_path}/topics ]]; then
      export TOPICS_PATH="${ROBOTIC_PATH}/${ROBOT}/topics"
    else
      export TOPICS_PATH="${profile_path}/topics"
    fi
  else
    echo "usage: rosworkon <ROBOT> [PROFILE]"
    return 1
  fi
}

# Set up default robot
rosworkon ${ROBOT}

# Add compsys scripts to PYTHONPATH
export PYTHONPATH="${PYTHONPATH}:${ROBOTIC_PATH}/compsys/scripts"

# Add tools.sh to PATH
export PATH="${ROBOTIC_PATH}/tools.sh:${PATH}"

# Source custom aliases and functions
source "${ROBOTIC_PATH}/compsys/aliases"

# Source catkin-tools shell verbs
if [[ -x $(command -v catkin) ]]; then
  source $(catkin locate --shell-verbs)
fi
